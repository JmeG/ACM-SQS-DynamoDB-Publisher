service: ACM-DynamoDB-Publisher

plugins:
  - serverless-iam-roles-per-function
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-sam
  - serverless-dynamodb-autoscaling

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  profile: "${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"

  dynamodb_hash_key: 'LineItemId'
  dynamodb_range_key: 'TimeIntervalStart'
  capacities:
    - table: ApplicationCostMonitoringTable
      write:
        minimum: '${self:custom.cf-parameters.dynamodb_wcu_min}'
        maximum: '${self:custom.cf-parameters.dynamodb_wcu_max}'
        usage: '${self:custom.cf-parameters.dynamodb_wcu_usage}'
      read:
        minimum: '${self:custom.cf-parameters.dynamodb_rcu_min}'
        maximum: '${self:custom.cf-parameters.dynamodb_rcu_max}'
        usage: '${self:custom.cf-parameters.dynamodb_rcu_usage}'

  cf-parameters:
    aws_adm_stack_name: "${env:AWS_ADM_STACK_NAME, 'ApplicationCostMonitoring-${self:custom.stage}'}"
    stream_view_type: "${env:STREAM_VIEW_TYPE, 'NEW_AND_OLD_IMAGES'}"
    # Sets the inital size
    dynamodb_rcu: "${env:DYNAMODB_RCU, '1'}"
    dynamodb_wcu: "${env:DYNAMODB_WCU, '5'}"
    # These are for autoscaling
    dynamodb_rcu_min: "${env:DYNAMODB_RCU_MIN, '1'}"
    dynamodb_wcu_min: "${env:DYNAMODB_WCU_MIN, '5'}"
    dynamodb_rcu_max: "${env:DYNAMODB_RCU_MAX, '100'}"
    dynamodb_wcu_max: "${env:DYNAMODB_WCU_MAX, '100'}"
    dynamodb_rcu_usage: "${env:DYNAMODB_RCU_USAGE, '0.75'}"
    dynamodb_wcu_usage: "${env:DYNAMODB_WCU_USAGE, '0.75'}"

provider:
  name: aws
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource:
          - Fn::GetAtt:
            - ApplicationCostMonitoringTable
            - Arn

functions:
  DynamoDBPublisher:
    handler: handlers/dynamodb-billing-item-publisher.handler
    description: "Write billing data to a DynamoDB table"
    runtime: python3.6
    memorySize: 128
    # High timeout to give room for retries
    timeout: 300
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      DYNAMODB_TABLE:
        Ref: ApplicationCostMonitoringTable
      DDT_HASH_KEY: '${self:custom.dynamodb_hash_key}'
      DDT_RANGE_KEY: '${self:custom.dynamodb_range_key}'

resources:
  Parameters:
    AwsAdmStackName:
      Type: String
      Description: 'AWS Application Monitoring CloudFormation stack name'
      Default: '${self:custom.cf-parameters.aws_adm_stack_name}'
    DynamoDBReadCapacityUnits:
      Type: String
      Description: "DynamoDB Table read capacity units"
      Default: '${self:custom.cf-parameters.dynamodb_rcu}'
#    DynamoDBReadCapacityUnitsMin:
#      Type: String
#      Description: "DynamoDB Table read capacity units autoscaling min"
#      Default: '${self:custom.cf-parameters.dynamodb_rcu_min}'
#    DynamoDBReadCapacityUnitsMax:
#      Type: String
#      Description: "DynamoDB Table read capacity units autoscaling max"
#      Default: '${self:custom.cf-parameters.dynamodb_rcu_max}'
    DynamoDBWriteCapacityUnits:
      Type: String
      Description: "DynamoDB Table write capacity units"
      Default: '${self:custom.cf-parameters.dynamodb_wcu}'
#    DynamoDBWriteCapacityUnitsMin:
#      Type: String
#      Description: "DynamoDB Table write capacity units autoscaling min"
#      Default: '${self:custom.cf-parameters.dynamodb_wcu_min}'
#    DynamoDBWriteCapacityUnitsMax:
#      Type: String
#      Description: "DynamoDB Table write capacity units autoscaling max"
#      Default: '${self:custom.cf-parameters.dynamodb_wcu_max}'
    StreamViewType:
      Type: String
      Description: 'DynamoDB table stream type'
      Default: '${self:custom.cf-parameters.stream_view_type}'

  Resources:
    SnsSubscriptionDynamoDBPublisher:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn:
          Fn::ImportValue:
            Fn::Join:
              - '-'
              - - Ref: AwsAdmStackName
                - 'BillingRecordsSnsTopicArn'
        Protocol: lambda
        Endpoint:
          Fn::GetAtt:
            - DynamoDBPublisherLambdaFunction
            - Arn

    # Needed because we're not setting the SNS event in the function section.
    DynamoDBPublisherLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Ref: DynamoDBPublisherLambdaFunction
        Principal: 'sns.amazonaws.com'
        SourceArn:
          Fn::ImportValue:
            Fn::Join:
              - '-'
              - - Ref: AwsAdmStackName
                - 'BillingRecordsSnsTopicArn'

    ApplicationCostMonitoringTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "LineItemId"
            AttributeType: "S"
          - AttributeName: "TimeIntervalStart"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "LineItemId"
            KeyType: "HASH"
          - AttributeName: "TimeIntervalStart"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits:
            Ref: DynamoDBReadCapacityUnits
          WriteCapacityUnits:
            Ref: DynamoDBWriteCapacityUnits
        StreamSpecification:
          StreamViewType:
            Ref: StreamViewType


  Outputs:
    BillingItemDynamoDBTableTableName:
      Description: "DynamoDB table name where billing items are written to."
      Value:
        Ref: ApplicationCostMonitoringTable
      Export:
        Name: "${self:service}-${self:provider.stage}-S3BillingItemWriterBucketName"

    BillingItemDynamoDBTableTableArn:
      Description: "DynamoDB table name where billing items are written to."
      Value:
        Fn::GetAtt:
          - ApplicationCostMonitoringTable
          - Arn
      Export:
        Name: "${self:service}-${self:provider.stage}-BillingItemDynamoDBTableTableArn"

    BillingItemDynamoDBTableTableStreamArn:
      Description: "DynamoDB table name where billing items are written to."
      Value:
        Fn::GetAtt:
          - ApplicationCostMonitoringTable
          - StreamArn
      Export:
        Name: "${self:service}-${self:provider.stage}-BillingItemDynamoDBTableTableStreamArn"

